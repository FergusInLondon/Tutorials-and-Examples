// +build ignore

package main

import (
	"io/ioutil"
	"os"
	"text/template"
	"time"

	"gopkg.in/yaml.v2"
)

var fileTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// File generated at {{ .Timestamp }}

package main

var statusMap = map[StatusCode]StatusMessage{
{{- range .Statuses }}
	{{ .Code }}: "{{ .Message }}",
{{- end }}
}
`))

func main() {
	type Status struct {
		Code    int    `yaml:"code"`
		Message string `yaml:"message"`
	}

	type input struct {
		Statuses []Status `yaml:"status"`
	}

	statusData, err := ioutil.ReadFile("statuses.yaml")
	if err != nil {
		panic(err)
	}

	fileInput := input{}
	err = yaml.Unmarshal(statusData, &fileInput)
	if err != nil {
		panic(err)
	}

	source, err := os.Create("statuses.go")
	if err != nil {
		panic(err)
	}
	defer source.Close()

	// Build file.
	fileTemplate.Execute(source, struct {
		Timestamp time.Time
		Statuses  []Status
	}{
		Timestamp: time.Now(),
		Statuses:  fileInput.Statuses,
	})
}
